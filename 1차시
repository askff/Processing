## 프로그래밍을 공부해야 하는 이유

꼭 알아야 하는것은 아니다

전자기기들이 어떤식으로 동작하는지에 대한 이해도가 높아지려면 원하는 소프트웨어를 만들어 보는 경험이 나중에 소프트웨어를 다루거나 앱을 만들고 기획할때 큰 도움이 된다

## 프로그래밍이란

컴퓨터가 굉장히 빠른 연산 능력을 갖춘 계산기라고 말할 수 있다

컴퓨터는 굉장히 빠른 계산 능력을 가진 기계로, 우리가 원하는 작업을 하기 위해서는 컴퓨터에게 명령을 내려야 한다.

## 프로세싱과 자바

프로세싱은 자바를 베이스로 하고 있다

프로세싱에서는 자바라는 언어에서 사용할 수 있는 모든 명령어들을 사용할 수 있게 된다

### 자바가 많이 쓰이고 있는 이유

다양한 기계들의 모두 사용 수 있게 디자인 되어있다

인터넷이 발전하면서 웹에서 굉장히 많이 사용되어 지게 되었고 안드로이드, os도 자바를 베이스로 한 os를 사용하여 현재는 안드로이드 개발이나 웹 개발 혹은 다양한 어플리케이션 개발 등에 많이 쓰이고 있다

## 프로세싱 학습의 장점

프로그래밍 언어는 한가지를 어느 정도 깊이 이해하고 나면 다른 언어로 전환하는 것이 그렇게 어려운 일이 아니다

## 프로세싱 언어를 공부하는 것의 장점

대다수의 프로그래밍 언어들은 먼저 프로그래밍을 해서 처음 하는 일이 보통 더하기 뺴기 곱하기 나누기 이런식으로 수치를 계산을 하거나 혹은 텍스트를 입력을 해서 결과물이 텍스트로 나오는 것들을 주로 처음에 공부하게 된

프로세싱은 디자이너나 아티스트를 위해 만들어진 소프트웨어여서 많은 명령어들이 화면상의 어떤 도형이나 이미지를 그리는 것에 초점이 맞춰져 있다

## 프로세싱과 유사한 프로그램 소개

### 오픈프레임 억스

프로세싱과 비슷한 방식으로 동작한다 

### 프로세싱과 다른점

c++을 베이스로 하고 있다

프로세싱에서 버벅거려서 소프트웨어가 너무 느리고 내가 원하는 만큼 속도가 안나온다

컴퓨터를 고사양으로 업그레이드 하거나 프로그래밍 스킬을 늘려 최적화로 프로그램이 잘 구동되게 한다

## CINDER

비주얼 적인 것을 제작하기 위한 소프트웨어로 기업에서 주로 사용하고 있다

## TOUCHDESIGNER

프로그래밍의 방법이 조금 다르다 

타이핑이 아니라 블록들을 연결하여 코딩하는 방식이다

이런 방식들은 요즘 많이 쓰고 있고 미디어 아티스트들도 굉장히 많이 사용하기 시작한 소프트웨어이다

이런 프로그래밍 방식을 visual programming language 라고 한다

## 오픈소스 소프트웨어

OS 오프 라이팅 시스템은 맥, 윈도우, 리눅스가 있다

### 오픈소스

오픈 소스는 사용자들이 코드를 공개하곻 자유롭게 수정할 수 있는 소프트 웨어를 의미한다

만든 코드를 서로 공개하여 그 코드를 다른 사람이 이용할 수 있고 따른 사람의 코드를 가져와서 사용하여 서로 공유를 해서 무료로 사용할 수 있다는 것이 장좀이다 

오픈소스는 코드를 공개하여 자유로운 수정을 통해서 지속적으로 발전 가능하고 다른 사람들과 협업을 통해 발전할 수도 있다

## 설치방법

웹브라우저에서 [processig.org](http://processig.org) 사이트에서 다운로드 메뉴로 클릭하여 이동한다

다운로드 페이지에서 사용 중인 운영체제에 맞는 버전을 선택해 다운로드한다

선택한 버전의 압축파일을 다운로드 하여 파일을 압축해제한다

프로세싱을 실행하면 프로세싱이 설치된 폴더가 자동으로 생성된다

설치가 안료되면 프로세싱 소프트웨어를 싱행하여 코딩을 시작할 수 있다

## 컴퓨터 그래픽 좌표체계

프로세상은 화면에 그림을 그리거나 다양한 그래픽 요소를 표시하는데 주로 사용하는 소프트웨어이다 이를 위해 좌표 체계의 이해가 중요하다 

## 수학에서의 좌표체계

수학에서 좌표 체계는 평면 상에 x축과 y축이 있고 원점 중심으로 자우 및상하 방향으로 값이 증가한다

## 레티나 디스플레이 등의 고해상도 모니터

고해상도 모니터 사용하면 픽셀의 크기가 작아져 픽셀 단위의 좌표가 실제 화면에서 표시되눈 크기가 다를수 있다

# 프로세싱 환경 세팅하기

## 프로세싱 환경 설정

### 설정 절차

환경 설정창 열기: 프로세싱 메뉴에서 환경설정을 선택한다 

맥 사용자는 command +, 윈도우 사용자는 ctrl + 키를 눌러도 된다

글꼴선택: 스케치 에디터  섹션에서 콘솔 글꼴 선택을 찾고 프로그래밍에 적합한 폰트를 선택한다

한글 입력 설정: 한글 압력 허용 옵션을 반드시 선택한다

아 옵션을 선택하지 않으면 한글 입력이 정상적으로 되지 않을 수 있다

기타 설정: 그 외에 사용될 폰트 크기, 오류 검사 활성화, 코드 자동 완성들을 설정할 수 있다

## 메모리 설정

메모리 설정은 기본적으로 256MB로 되어 있다

메모리 용량이 부족하다고 느끼면 이 설정을 변경할 수 있다

## 인터페이스 설명

### 프로세싱 인터페이스 설정

삼각형 모양의 실행버튼: 코드를 실행하여 결과를 확인할 수 있다

디버깅 버튼: 코드에 오류가 있을 때 디버깅 기능을 활성화 한다

모드: 프로세싱은 다양한 모드를 지원한다 주로 사용하는 기본 모드는 자바이다 

추가모드는 나중에 프로그래밍을 확장하거나 다른 언어를 사용할 떄 유용하다

파일 저장 및 탭 추가: 코드 작성하고 저장할 떄 사용한다

콘솔 창: 코드 실행 중 발생하는 메세지 오류 결과 등이 표시된다

## 코딩 시작하기 기본 문법

### 프로그램 소개

프로세싱은 컴퓨터 프로그래밍 언어로 그림을 그리는 프로그램이다

디자이너와 아티스트들이 사용하는 그림 그리기 도구와 비슷한 기능을 제공한다

### 필요한 도구 및 재료

그림 그리기에 필요한 종이 연필 색연필등 재료와 도구 준비한다

프로세싱 소프트웨어 설치하고 실행하여 그림 그리기 환경을 설정한다

### 화면크기 설정

프로그램 실행 시 화면 크기를 설정하는 방법을 설명하고 프로세싱 레퍼런스 페이지를 활용하여 사이즈 명령어의 사용법을 확인하는 방법을 알려준다

### 예제 실행

설정한 화면 크기로 창을 만들고 점을 찍는 예제를 실행한다

예제 실행을 통해 프로세싱 기본 개념을 이해하고 실습한다

## 점을 찍어보자 point(x,y);

### 포인트 명령어

컴퓨터에게 점을찍도록 지시하는 명령어

포인트 명령어 사용하기 위해 찍을 위치를 지정하는 매개변수가 필요하다

### 좌표값 설정

포인트 명령어에서 좌표값 설정할 때 좌측 상단 기준으로 x와y 좌표값 지정한다

### 찍을 위치 설정

포인트 명령어를 사용할떄 정확한 찍을 위치를 지정해야 한다

### 실행 결과 확인

설정한 좌표값 기준으로 프로그램 실행하면 해당 위치에 점이 찍힌다

## 선을 그려보자 line(x1, y1, x2, y2);

### 라인 명령어

직선 그릴 떄 사용하는 명령어이다 

라인명령어를 사용하기 위해서는 각 점의 좌표값이 필요핮다

### 좌표값 설정

라인 명령어에서 시작점과 끝점의 좌표값 지정한다

### 선그리기

라인 명령어를 사용하여 시작점과 끝점 지정하면 해당위치에 선이 그려진다

### 코드 실행 결과 확인

프로그램 실행하면 지정한 위치에 선이 그려진다

시작점과 끝점 활용을 잘하면 원하는 형태의 선을 그릴수 있다

## 면, 사각형을 그려보자 rect(a, b, c, d);

### **렉트 명령어**

네모 그릴떄 사용하는 명령어이다

네개의 매개변수가 필요하다

각각 시작점의 x 좌표, y 좌표, 너비, 높이를 나타낸다

### **다양한 도형 그리기 명령어**

아크(Arc): 호를 그릴 때 사용한다

써클(Circle): 원을 그릴 때 사용한다

엘립스(Ellipse): 타원을 그릴 때 사용한다

쿼드(Quad): 사각형을 그릴 때 사용한다.

레트(Rect): 직사각형을 그릴 때 사용한다

스퀘어(Square): 정사각형을 그릴 때 사용한다

트라이앵글(Triangle): 삼각형을 그릴 때 사용한다

### **명령어 활용**

명령어를 사용하여 원하는 위치와 크기의 도형을 그릴 수 있다

시작점과 너비, 높이 등을 잘 설정하여 원하는 모양의 도형을 그릴 수 있.

### **레퍼런스 페이지 활용**

레퍼런스 페이지에서는 다양한 도형 그리기 명령어들을 확인할 수 있

각 명령어의 사용법을 숙지하고 실습을 통해 익숙해지는 것이 중요하다

## 원을 그려보자 elipse(a, b, c, d);

### **엘립스 명령어 활용**

엘립스 명령어는 타원을 그릴 때 사용된다

엘립스 명령어도 마찬가지로 네 개의 매개변수가 필요하다

실행 결과는 프로그램이 위에서부터 아래로 순차적으로 실행되므로, 이미 그려진 도형 위에 겹쳐 그려진다

원이나 네모 등의 도형이 겹쳐져 나타나게 된다

## 선의 색을 바꿔보자 stroke(gray);

### **색상 변경 명령어 활용**

외곽선 색상을 변경하는 명령어는 stroke() 이며, 내부를 채우는 색상을 변경하는 명령어는 fill() 이다

색상을 변경하기 위해서는 먼저 색상을 선택하고 그림을 그려야 한

색상 선택은 0부터 255 사이의 숫자를 입력하여 수행한다

예를 들어, 외곽선 색상을 변경하고자 한다면  stroke()  명령어를 사용된다

실행 결과는 코드가 위에서부터 아래로 순차적으로 실행되기 때문에, 색상 변경 명령어는 그림을 그린 이후에 적용된다

색상 변경 명령어를 그림을 그리기 전에 적용하면 변화가 없습니다.

색상을 선택할 때는 0에서 255 사이의 숫자를 입력해야 하며, 이는 컴퓨터가 색상을 처리하는 방식에 따라 지정된다

검정색은 0, 흰색은 255로 지정됩니다. 중간 색상은 이 두 값 사이의 숫자를 입력하여 선택할 수 있다

## 컬러로 선의 색을 바꿔보자 stroke(a, b, c);

**RGB 색상 코드**: 이는 빛의 삼원색인 빨강(Red), 녹색(Green), 파랑(Blue)의 세 가지 색상을 이용하여 색상을 지정하는 방법입니다. 각 색상은 0에서 255 사이의 값으로 표현됩니다. 예를 들어, 빨간색은 (255, 0, 0), 초록색은 (0, 255, 0), 파란색은 (0, 0, 255)입니다. 이렇게 색상을 조합하여 원하는 색상을 만들 수 있다

**색상 선택 도구**: 그래픽 소프트웨어에서는 일반적으로 색상 선택 도구를 제공합니다. 이 도구를 사용하면 직접 색상을 선택할 수 있으며, 선택한 색상에 대한 RGB 값이 표시됩니다. 이를 이용하여 원하는 색상을 선택하고 RGB 값을 확인한 후 사용할 수 있다

**색상 이름**: 몇 가지 색상은 이름으로 지정할 수도 있습니다. 예를 들어, "red", "blue", "green" 등이 있습니다. 그러나 이 방법은 제한적이며 RGB 값을 직접 입력하는 것보다는 덜 정확한

## 면의 색을 바꿔보자 fill();

### **선 색상 변경하기**

선의 색상을 변경하는 방법은 스트로그 명령어를 사용합니다. 이 명령어는 괄호 안에 색상을 지정하여 선의 색을 변경한

단일 색상 지정: 스트로그(색상)

RGB 값 지정: 스트로그 (R, G, B)

### **면에 색상 칠하기**

면에 색상을 칠하는 경우, 리 명령어를 사용한다
이 명령어는 괄호 안에 매개 변수를 입력하여 색상을 지정한다
매개 변수는 하나만 입력하면 그레이 스케일로, 세 개를 입력하면 RGB 값으로 설정된다

그레이 스케일: 리 ( 밝기)

RGB 값: 리(R, G, B)

### **투명도 설정하기**

색상의 투명도를 설정하려면, 알파 값 매개 변수를 사용한다
이 값을 0으로 설정하면 완전히 투명하게, 255로 설정하면 완전히 불투명하게 된다

알파 값 설정: 리( R, G, B, 알파 값)

### **외곽선 제거하기**

외곽선을 제거하려면 스트로크 명령어에 완전히 투명한 색상을 설정한다

외곽선 제거: 스트로크(색상, 알파값)

## 면 혹은 선을 그리지 말아라  noFill(); noStroke();

### **그래픽 요소 조작**

프로세싱에서 선을 그리는 방법은 스트로그 명령어를 사용합니다. 아래는 선을 그리는 기본적인 예제 코드이다

```cpp
// 라인 그리기
stroke(255); // 흰색 선
line(30, 20, 85, 75); // (30, 20)에서 (85, 75)까지 선 그리기

```

### 사각형 그리기

프로세싱에서 사각형을 그리는 방법은 렉트 명령어를 사용합니다. 아래는 사각형을 그리는 기본적인 예제 코드이다

```cpp
// 사각형 그리기
fill(0, 255, 0); // 녹색으로 채우기
rect(50, 50, 100, 75); // (50, 50) 위치에 가로 100, 세로 75 크기의 사각형 그리기
```

### 원 그리기

프로세싱에서 원을 그리는 방법은 엘립 명령어를 사용합니다. 아래는 원을 그리는 기본적인 예제 코드이다

```cpp
// 원 그리기
stroke(255, 0, 0); // 빨간색 선
ellipse(100, 100, 50, 50); // (100, 100)을 중심으로 반지름 25의 원 그리기

```

### **투명도 설정**

그래픽 요소의 투명도를 설정하는 방법은 일파 값으로 조절할 수 있습니다. 이 값은 0에서 255 사이의 범위를 가지며, 0일 경우 완전한 투명, 255일 경우 완전한 불투명을 나타낸다

```cpp
// 투명도 설정 예제
fill(255, 0, 0, 127); // 빨간색, 투명도 50%

```

## 프로세싱 언어의 구조 void setup(){} void draw() {}

### **프로세싱 기본 구조 및 프로그래밍 원리**

프로세싱을 사용하여 그림을 그리는 방법은 일종의 프로그래밍 원리를 따르고 있다

컴퓨터에게 명령을 내릴 때에는 사전 준비과정과 반복과정을 고려해야 한

### 준비과정

프로세싱에서 그림을 그리기 위해서는 먼저 사전에 필요한 재료를 준비해야 힌다

```cpp
// 준비과정 예시
int 김의양 = 100;
int 밥의양 = 100;
// 필요한 재료들을 준비하는 코드 작성

```

### 반복과정

그 다음으로는 준비과정이 끝나면 반복해서 일을 수행해야 한다

김밥을 만들 때는 김을 깔고, 재료를 넣고, 김으로 감아서 반복해서 김밥을 만든다. 이 과정을 프로세싱에서는 draw() 함수 안에 작성한다

```cpp
// 반복과정 예시
void draw() {
  // 반복해서 수행할 작업을 여기에 작성
}

```

### 기본 구조

프로세싱 프로그램의 기본 구조는 다음과 같

```cpp
void setup() {
  // 초기 설정을 수행하는 코드 작성
}

void draw() {
  // 반복해서 수행할 작업을 여기에 작성
}

```

이렇게 프로세싱은 사전 준비과정과 반복과정을 통해 그림을 그리는데 사용된다

이러한 기본 구조를 이해하는 것이 중요하다
